-------------------------[ Mean Heap ]---------------------------
#define MAX_ELEMENTS 200 /*maximum size of heap+1*/
#define HEAP_FULL(n)  (n == MAX_ELEMENTS-1)
#define HEAP_EMPTY(n)  (!n)
typedef struct {
        int key;
        /* other fields */
} element;
element heap[MAX_ELEMENTS];
int n = 0;

void push(element item, int *n)
{
   int i;
   if (HEAP_FULL(*n)) {
      fprintf(stderr, "The heap is full. ");
      exit(EXIT_FAILURE);
   }
   i = ++(*n);
   while ((i != 1) && (item.key > heap[i/2].key)) {
      heap[i] = heap[i/2];
      i /= 2;
   }
   heap[i] = item;
} 

element pop(int *n)
{
   int parent, child;
   element item, temp;
   if (HEAP_EMPTY(*n)) {
      fprintf(stderr, "The heap is empty");
      exit(EXIT_FAILURE);
   }
   item = heap[1];        
   temp = heap[(*n)--];
   parent = 1;
   child = 2;
   while (child <= *n) {     
     if ((child<*n) && (heap[child].key<heap[child+1].key))     
        child++;
     if (temp.key >= heap[child].key) break;
     heap[parent] = heap[child];    
     parent = child;
     child *= 2;
  }
  heap[parent] = temp;
  return item;
}

------------------------[ set operation ]--------------------------
int parent[MAX_ELEMENTS];

int find(int i)
{
   int index=i;
   for (; parent[index] >= 0; i = parent[index]);
   return index;
}

void union(int i, int j) 
{/* union the sets with roots i and j, i != j, using the weighting rule.
   parent[i] = -count[i] and parent[j] = -count[j]  */
   int temp = parent[i] + parent[j];
   if (parent[i] > parent[j]) {
      parent[i] = j; /* make j the new root*/
      parent[j] = temp;
   }
   else {
      parent[j] = i; /* make i the new root*/
      parent[i] = temp;
   }
}

-----------------------------------------------------------------------